C:\Users\nosleep>jshell -v
|  Welcome to JShell -- Version 17.0.10
|  For an introduction type: /help intro

jshell> 100 + 300
$1 ==> 400
|  created scratch variable $1 : int

jshell> $1
$1 ==> 400
|  value of $1 : int

jshell> 2 + 5
$3 ==> 7
|  created scratch variable $3 : int

jshell> int x = 5
x ==> 5
|  created variable x : int

jshell> x + 2
$5 ==> 7
|  created scratch variable $5 : int

jshell> $5
$5 ==> 7
|  value of $5 : int

jshell> System.out.println($5)
7

jshell> String greeting = "Hello"
greeting ==> "Hello"
|  created variable greeting : String

jshell> greeting.c
charAt(                chars()                codePointAt(           
codePointBefore(       codePointCount(        codePoints()           
compareTo(             compareToIgnoreCase(   concat(                
contains(              contentEquals(         
jshell> greeting.con
concat(          contains(        contentEquals(   
jshell> greeting.concat(" World")
$9 ==> "Hello World"
|  created scratch variable $9 : String

jshell> $9.to
toCharArray()   toLowerCase(    toString()      toUpperCase(    
jshell> $9.toUpperCase()
$10 ==> "HELLO WORLD"
|  created scratch variable $10 : String

jshell> /import
|    import java.io.*
|    import java.math.*
|    import java.net.*
|    import java.nio.file.*
|    import java.util.*
|    import java.util.concurrent.*
|    import java.util.function.*
|    import java.util.prefs.*
|    import java.util.regex.*
|    import java.util.stream.*

jshell> LocalDateTime localDateTime = LocalDateTime()
|  Error:
|  cannot find symbol
|    symbol:   class LocalDateTime
|  LocalDateTime localDateTime = LocalDateTime();
|  ^-----------^
|  Error:
|  cannot find symbol
|    symbol:   method LocalDateTime()
|  LocalDateTime localDateTime = LocalDateTime();
|                                ^-----------^

jshell> List<String> names = Arrays.asList("Syed", "Mike", "Jenny");
names ==> [Syed, Mike, Jenny]
|  created variable names : List<String>

jshell> names.sort(Comparator.naturalOrder())

jshell> names
names ==> [Jenny, Mike, Syed]
|  value of names : List<String>

jshell> names.sort(Comparator.reverseOrder())

jshell> names
names ==> [Syed, Mike, Jenny]
|  value of names : List<String>

jshell> List<String> list = list.of("Syed", "Mike", "Jenny");
|  Error:
|  illegal static interface method call
|    the receiver expression should be replaced with the type qualifier 'java.util.List<java.lang.String>'
|  List<String> list = list.of("Syed", "Mike", "Jenny");
|                      ^------------------------------^

jshell> List<String> list = List.of("Syed", "Mike", "Jenny");
list ==> [Syed, Mike, Jenny]
|  created variable list : List<String>

jshell> list.size()
$17 ==> 3
|  created scratch variable $17 : int

jshell> list.contains("Syed")
$18 ==> true
|  created scratch variable $18 : boolean

jshell> Math.random()
$19 ==> 0.007089754280011684
|  created scratch variable $19 : double

jshell> Math.random()
$20 ==> 0.1424711617847796
|  created scratch variable $19 : double

jshell> Math.sqrt(49)
$21 ==> 7.0
|  created scratch variable $21 : double

jshell> // Declarations, expression statements, classes, interface, methods, fileds and imports

jshell> // Package declaration are not not allow.

jshell> /* This is allowed */

jshell> var x = 1;
x ==> 1
|  modified variable x : int
|    update overwrote variable x : int

jshell> var y = 2;
y ==> 2
|  created variable y : int

jshell> var z = x + y;
z ==> 3
|  created variable z : int

jshell> void sayHelloWorld(String s) { System.out.println(s);}
|  created method sayHelloWorld(String)

jshell> sayHelloWorld("Hello World");
Hello World

jshell> /list

   1 : 100 + 300
   2 : $1
   3 : 2 + 5
   5 : x + 2
   6 : $5
   7 : System.out.println($5)
   8 : String greeting = "Hello";
   9 : greeting.concat(" World")
  10 : $9.toUpperCase()
  11 : List<String> names = Arrays.asList("Syed", "Mike", "Jenny");
  12 : names.sort(Comparator.naturalOrder())
  13 : names
  14 : names.sort(Comparator.reverseOrder())
  15 : names
  16 : List<String> list = List.of("Syed", "Mike", "Jenny");
  17 : list.size()
  18 : list.contains("Syed")
  19 : Math.random()
  20 : Math.random()
  21 : Math.sqrt(49)
  22 : var x = 1;
  23 : var y = 2;
  24 : var z = x + y;
  25 : void sayHelloWorld(String s) { System.out.println(s);}
  26 : sayHelloWorld("Hello World");

jshell> /list -all

  s1 : import java.io.*;
  s2 : import java.math.*;
  s3 : import java.net.*;
  s4 : import java.nio.file.*;
  s5 : import java.util.*;
  s6 : import java.util.concurrent.*;
  s7 : import java.util.function.*;
  s8 : import java.util.prefs.*;
  s9 : import java.util.regex.*;
 s10 : import java.util.stream.*;
   1 : 100 + 300
   2 : $1
   3 : 2 + 5
   4 : int x = 5;
   5 : x + 2
   6 : $5
   7 : System.out.println($5)
   8 : String greeting = "Hello";
  e1 : greeting.c
   9 : greeting.concat(" World")
  10 : $9.toUpperCase()
  e2 : LocalDateTime localDateTime = LocalDateTime();
  11 : List<String> names = Arrays.asList("Syed", "Mike", "Jenny");
  12 : names.sort(Comparator.naturalOrder())
  13 : names
  14 : names.sort(Comparator.reverseOrder())
  15 : names
  e3 : List<String> list = list.of("Syed", "Mike", "Jenny");
  16 : List<String> list = List.of("Syed", "Mike", "Jenny");
  17 : list.size()
  18 : list.contains("Syed")
  19 : Math.random()
  20 : Math.random()
  21 : Math.sqrt(49)
  22 : var x = 1;
  23 : var y = 2;
  24 : var z = x + y;
  25 : void sayHelloWorld(String s) { System.out.println(s);}
  26 : sayHelloWorld("Hello World");

jshell> /list 3

   3 : 2 + 5

jshell> /list x y

  22 : var x = 1;
  23 : var y = 2;

jshell> /1
100 + 300
$27 ==> 400
|  created scratch variable $27 : int

jshell> /drop 1
|  dropped variable $1

jshell> /drop 2

jshell> /2
$1
|  Error:
|  cannot find symbol
|    symbol:   variable $1
|  $1
|  ^^

jshell> 
